[
  {
    "objectID": "Maps_and_Figures.html",
    "href": "Maps_and_Figures.html",
    "title": "BBECA Work",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nimport contextily as cx\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec\nfrom MapTools_py import map_elements as mel\n\n\nBBECA = gpd.read_file('BB_Data/Spatial/ECOSYS_REV_TEM.shp')\nBBECA = BBECA[['PRISTINE', 'ECO', 'MAP_UNIT', 'geometry']]\n\nClasses = {\n    'Water Lily - Watersh':'Water',\n    'Herb. veg on dist. p':'Disturbed',\n    'Open Water':'Water',\n    'Cultivated Field':'Disturbed',\n    'Disturbed Surface':'Disturbed',\n    'Hardhack Thicket':'Forested',\n    'Birch Forest':'Forested',\n    'Mixed Conifer Forest':'Forested',\n    'Pine-Salal Forest':'Forested',\n    'Pine Sphagnum Woodla':'Pine\\nSphagnum',\n    'Beakrush - Three-way':'Sedge\\nSphagnum',\n    'Pine Sphagnum Tall S':'Pine\\nSphagnum',\n    'Beakrush - Sphagnum':'Sedge\\nSphagnum',\n    'Pine Sphagnum Low Sh':'Pine\\nSphagnum',\n}\n\nColors ={\n    'Pine\\nSphagnum':'#76bd68',#light green\n    'Sedge\\nSphagnum':'#0eb0a5',#dark teal\n    'Forested':'#193d02',#dark green\n    'Disturbed':'#f2ef8a',#light yellow\n    'Water':'#053ba8'#dark blue\n}\n\nBBECA['Class'] = BBECA['MAP_UNIT']\nBBECA['Class'] = BBECA['Class'].replace(Classes)\n\nBBECA.loc[BBECA['Class']=='Other','MAP_UNIT']='Other'\n\nBBECA['AREA_sqKM']=BBECA.area.values/1e6\n\nTowers = gpd.read_file('BB_Data/Spatial/Towers.shp')\nTowers.loc[Towers['Name']=='Sapling_NoTreatment','Name']='BBS'\nTowers['X'] = Towers.geometry.x\nTowers['Y'] = Towers.geometry.y\n\nBurn = gpd.read_file('BB_Data/Spatial/SeedlingRemoval.shp')\n\nChambers = gpd.read_file('BB_Data/Spatial/Chamber_Sites_2016_Burn_Zone.shp')\nfor eco_type in BBECA['MAP_UNIT'].unique():\n    unit = BBECA.loc[BBECA['MAP_UNIT']==eco_type].dissolve().geometry[0]\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Unit'] = eco_type.replace(\n        'Pine Sphagnum ','').replace('Low Sh','Low Shurb').replace('Tall S','Tall Shurb').replace('Woodla','Woodland')\n\nChambers=Chambers[['geometry','Unit']].copy()\n\nGrid = gpd.read_file('BB_Data/Spatial/SeedlingRemoval.shp')\nGrid.loc[Grid['year_done']!='2024','Treatment']='Seedling Removal'\nGrid.loc[Grid['year_done']=='2024','Treatment']='Control'\nGrid = Grid[['geometry','Treatment']].copy()\nGrid = Grid.dissolve(by='Treatment')\n\nfor i,row in Grid.iterrows():\n    unit = row.geometry\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Treatment'] = i\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Zone'] = 2016\n    \nChambers['Treatment']=Chambers['Treatment'].fillna('Control')\nChambers['Zone']=Chambers['Zone'].fillna(2005)\n\nChambers.loc[Chambers['Treatment']=='Seedling Removal','marker']='^'\nChambers.loc[Chambers['Treatment']=='Control','marker']='v'\n\nChambers['geometry'] = Chambers.buffer(50)\nChambers = Chambers.dissolve(by=['Unit','Treatment','Zone'])\n\nChambers['geometry']=Chambers.geometry.centroid\n\n\nEco = BBECA[['Class','AREA_sqKM','geometry']].dissolve(by='Class',aggfunc='sum')\nEco['Pct']=Eco['AREA_sqKM']/Eco['AREA_sqKM'].sum()\nEco = Eco.sort_values(by='Pct')\nEco.to_file('BB_Data/Ecosystem_Summary.shp')\n\nfor key,color in Colors.items():\n    Eco.loc[Eco.index==key,'Color']=color\n\nChambers = Chambers.reset_index()\n\n\nBoundary = BBECA[['geometry']].dissolve().explode(index_parts=True)\nBoundary = Boundary.loc[Boundary.area>= 1e6].to_crs('WGS1984')\nBoundary.to_file('BB_Data/BBECA_Boundary.geojson',driver='GeoJSON')\n\n\nfig = plt.figure(figsize=(10,7))\ngs = gridspec.GridSpec(100, 100)\nbar=fig.add_subplot(gs[7:93, 0:20])\nmap=fig.add_subplot(gs[0:, 21:])\nClass_Patches = []\nbar_ylbl = []\nbar_ytick = []\nfor index,row in Eco.iterrows():\n    kwargs = {\n        'facecolor':row['Color'],\n        'linewidth':.5,\n        'edgecolor':'#646669'\n        }\n    Eco.loc[Eco.index==index].plot(ax=map,**kwargs)\n    bar.barh(index,row['AREA_sqKM'],\n             **kwargs)\nbar.grid(axis='x')\nbar.set_xlabel('Area (km$^2$)')\nbar.set_title('Ecosystems')\n\nkwargs = {\n    'marker':'s',\n    'facecolor':'r',\n    'edgecolor':'k',\n    's':50\n    }\n\nlabel_pad = 45\n\nBB = Towers.loc[Towers['Name']!='BBS']\nmap.scatter(BB['X'],BB['Y'],\n           label='Long-Term',\n           **kwargs)\nfor i,row in BB.iterrows():\n    map.text(row['X']+label_pad,row['Y']+label_pad,f'est. {int(row.Start)}',color='white')\n\nkwargs['marker'] = 'o'\nBBS = Towers.loc[Towers['Name']=='BBS']\nmap.scatter(BBS['X'],BBS['Y'],\n           label='Mobile',\n           **kwargs)\nfor i,row in BBS.iterrows():\n    map.text(row['X']+label_pad,row['Y']+label_pad,f'est. *2023',color='white')\n\nkwargs['facecolor'] ='white'\nfor treat in Chambers['Treatment'].unique():\n    row = Chambers.loc[((Chambers['Zone']==2016)&(Chambers['Treatment']==treat))]\n    kwargs['marker'] = row['marker'].iloc[0]\n    # kwargs['facecolor'] = row['color']\n    map.scatter(row.geometry.x,row.geometry.y,\n           label=treat,\n           **kwargs)\n\nhandles, labels = map.get_legend_handles_labels()\nhandles.insert(0,'Flux Towers')\nlabels.insert(0,'')\n\nhandles.insert(3,'Chamber Plots')\nlabels.insert(3,'')\nmap.legend(handles=(handles),labels=(labels),loc=4,\n           handler_map={str: mel.LegendTitle({'fontsize': 14})})\nmap.get_xaxis().set_visible(False)\nmap.get_yaxis().set_visible(False)\nmap.set_title('Burns Bog Ecological Conservancy Area')\n\n\ncx.add_basemap(map,source=cx.providers.OpenStreetMap.Mapnik, crs=BBS.crs)#, zoom=11)\nplt.savefig('images/EcosystemMap.png',dpi=600)\n\n\n\n\n\nBoundary = BBECA.dissolve()\n\nScale = 27500\n\nfig,ax=plt.subplots(figsize=(5,5))\n\naccess_token='pk.eyJ1IjoidWJjbWljcm9tZXQiLCJhIjoiY2xmMnJzYzlnMGFsYTNxcW1kYWhubjBiaSJ9.rhIOVatxQoS4M__qIFv6Pg'\n\ntileurl = 'https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?access_token=' + str(access_token)\n\nBoundary.plot(ax=ax,facecolor='None',edgecolor='yellow')\nxl = ax.get_xlim()\nyl = ax.get_ylim()\n\naspect = ((xl[0]-xl[1])/(yl[0]-yl[1]))\n\nax.set_ylim(yl[0]-Scale,yl[1]+Scale)\nax.set_xlim(xl[0]-Scale*aspect,xl[1]+Scale*aspect)\n\ncx.add_basemap(ax,source=tileurl, crs=Boundary.crs, zoom=12)\n\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.tight_layout()\nplt.savefig('images/Basemap.png',dpi=600)\n\n\n\n\n\nimport rasterio as rio\nimport numpy as np\nfrom rasterio.plot import show\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\npath = \"/mnt/g/My Drive/earthengine/\"\nname = \"S2_Summer_Composite.tif\"\nnew_name = \"S2_Summer_Composite_projected.tif\"\n\n\nBBECA.crs\n\n\ndst_crs = 'EPSG:26910'\n\nProjected_Image = 'temp/FI_Projected.tif'\n\nwith rio.open(path+name) as src:\n    transform, width, height = calculate_default_transform(\n        src.crs, dst_crs, src.width, src.height, *src.bounds)\n    kwargs = src.meta.copy()\n    kwargs.update({\n        'crs': dst_crs,\n        'transform': transform,\n        'width': width,\n        'height': height\n    })\n\n    with rio.open(Projected_Image, 'w', **kwargs) as dst:\n        for i in range(1, src.count + 1):\n            # clip = pct_clip(rio.band(src, i))\n            reproject(\n                source=rio.band(src, i),\n                destination=rio.band(dst, i),\n                src_transform=src.transform,\n                src_crs=src.crs,\n                dst_transform=transform,\n                dst_crs=dst_crs,\n                resampling=Resampling.nearest)\n\n\n\n# import numpy as np\n# import pandas as pd\n# import matplotlib.pyplot as plt\n\n# ECC = pd.read_csv('BB_Data/DELTA BURNS BOG.csv',parse_dates=['LOCAL_DATE'])\n# ECC = ECC.set_index('LOCAL_DATE')\n# ECC_m = ECC[['TEMP']].groupby(ECC.index.month).mean()\n# ECC_ym = ECC[['PRECIP_AMOUNT']].resample('m').sum()\n# ECC_m['PRECIP_AMOUNT'] = ECC_ym.groupby(ECC_ym.index.month).mean()\n\n# kwargs = {'color':'red','edgecolor':'k'}\n\n# fig,ax=plt.subplots(2)\n# ax[0].bar(ECC_m.index,ECC_m['TEMP'],**kwargs)\n# kwargs['color']='blue'\n# ax[1].bar(ECC_m.index,ECC_m['PRECIP_AMOUNT'],**kwargs)\n\n\n# ECC.loc[ECC['WIND_DIRECTION']<=0,'WIND_DIRECTION']=np.nan\n\n# ECC['WIND_DIRECTION'] = (ECC['WIND_DIRECTION']*10).round(0)\n# ECC['WIND_BIN'] = pd.cut(ECC['WIND_DIRECTION'],np.linspace(0,360,17))\n# bin_width = ECC['WIND_BIN'].apply(lambda x: (x.right-x.left)).mean()*np.pi/180\n\n\n# ECC['WIND_BIN'] = ECC['WIND_BIN'].apply(lambda x: x.mid*np.pi/180)\n\n\n# ECC_w = ECC.groupby('WIND_BIN').count()['WIND_DIRECTION']\n# ECC_w = ECC_w/ECC_w.sum()\n\n# fig, ax = plt.subplots(\n#   subplot_kw = {'projection': 'polar'} \n# )\n# ax.bar(ECC_w.index, ECC_w,\n# width=bin_width,\n# **kwargs)\n# ax.set_rticks([0.05,.1,.15])\n# ax.grid(True)\n# ax.set_theta_zero_location('N')\n# ax.set_theta_direction(-1)"
  },
  {
    "objectID": "EcosystemMap.html",
    "href": "EcosystemMap.html",
    "title": "BBECA Work",
    "section": "",
    "text": "import geopandas as gpd\nimport matplotlib.pyplot as plt\nimport contextily as cx\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec\nfrom MapTools_py import map_elements as mel\n\n\nBBECA = gpd.read_file('BB_Data/Spatial/ECOSYS_REV_TEM.shp')\nBBECA = BBECA[['PRISTINE', 'ECO', 'MAP_UNIT', 'geometry']]\n\nClasses = {\n    'Water Lily - Watersh':'Water',\n    'Herb. veg on dist. p':'Disturbed',\n    'Open Water':'Water',\n    'Cultivated Field':'Disturbed',\n    'Disturbed Surface':'Disturbed',\n    'Hardhack Thicket':'Forested',\n    'Birch Forest':'Forested',\n    'Mixed Conifer Forest':'Forested',\n    'Pine-Salal Forest':'Forested',\n    'Pine Sphagnum Woodla':'Pine\\nSphagnum',\n    'Beakrush - Three-way':'Sedge\\nSphagnum',\n    'Pine Sphagnum Tall S':'Pine\\nSphagnum',\n    'Beakrush - Sphagnum':'Sedge\\nSphagnum',\n    'Pine Sphagnum Low Sh':'Pine\\nSphagnum',\n}\n\nColors ={\n    'Pine\\nSphagnum':'#76bd68',#light green\n    'Sedge\\nSphagnum':'#0eb0a5',#dark teal\n    'Forested':'#193d02',#dark green\n    'Disturbed':'#f2ef8a',#light yellow\n    'Water':'#053ba8'#dark blue\n}\n\nBBECA['Class'] = BBECA['MAP_UNIT']\nBBECA['Class'] = BBECA['Class'].replace(Classes)\n\nBBECA.loc[BBECA['Class']=='Other','MAP_UNIT']='Other'\n\nBBECA['AREA_sqKM']=BBECA.area.values/1e6\n\nTowers = gpd.read_file('BB_Data/Spatial/Towers.shp')\nTowers.loc[Towers['Name']=='Sapling_NoTreatment','Name']='BBS'\nTowers['X'] = Towers.geometry.x\nTowers['Y'] = Towers.geometry.y\n\nBurn = gpd.read_file('BB_Data/Spatial/SeedlingRemoval.shp')\n\nChambers = gpd.read_file('BB_Data/Spatial/Chamber_Sites_2016_Burn_Zone.shp')\nfor eco_type in BBECA['MAP_UNIT'].unique():\n    unit = BBECA.loc[BBECA['MAP_UNIT']==eco_type].dissolve().geometry[0]\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Unit'] = eco_type.replace(\n        'Pine Sphagnum ','').replace('Low Sh','Low Shurb').replace('Tall S','Tall Shurb').replace('Woodla','Woodland')\n\nChambers=Chambers[['geometry','Unit']].copy()\n\n    \n\nGrid = gpd.read_file('BB_Data/Spatial/SeedlingRemoval.shp')\nGrid.loc[Grid['year_done']!='2024','Treatment']='Seedling Removal'\nGrid.loc[Grid['year_done']=='2024','Treatment']='Control'\nGrid = Grid[['geometry','Treatment']].copy()\nGrid = Grid.dissolve(by='Treatment')\n\nfor i,row in Grid.iterrows():\n    unit = row.geometry\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Treatment'] = i\n    Chambers.loc[Chambers.geometry.intersects(unit)==True,'Zone'] = 2016\n    \nChambers['Treatment']=Chambers['Treatment'].fillna('Control')\nChambers['Zone']=Chambers['Zone'].fillna(2005)\n\nChambers.loc[Chambers['Treatment']=='Seedling Removal','marker']='^'\nChambers.loc[Chambers['Treatment']=='Control','marker']='v'\n\nChambers['geometry'] = Chambers.buffer(50)\nChambers = Chambers.dissolve(by=['Unit','Treatment','Zone'])\n\nChambers['geometry']=Chambers.geometry.centroid\n\n\nEco = BBECA[['Class','AREA_sqKM','geometry']].dissolve(by='Class',aggfunc='sum')\nEco['Pct']=Eco['AREA_sqKM']/Eco['AREA_sqKM'].sum()\nEco = Eco.sort_values(by='Pct')\nEco.to_file('BB_Data/Ecosystem_Summary.shp')\nEco_s = Eco.copy()\nEco_s['geometry']=Eco_s['geometry'].simplify(50)\nEco_s.to_file('BB_Data/Ecosystem_Simple.shp')\n\nfor key,color in Colors.items():\n    Eco.loc[Eco.index==key,'Color']=color\n\nChambers = Chambers.reset_index()\n\n\nfig = plt.figure(figsize=(10,7))\ngs = gridspec.GridSpec(100, 100)\nbar=fig.add_subplot(gs[7:93, 0:20])\nmap=fig.add_subplot(gs[0:, 21:])\nClass_Patches = []\nbar_ylbl = []\nbar_ytick = []\nfor index,row in Eco.iterrows():\n    kwargs = {\n        'facecolor':row['Color'],\n        'linewidth':.5,\n        'edgecolor':'#646669'\n        }\n    Eco.loc[Eco.index==index].plot(ax=map,**kwargs)\n    bar.barh(index,row['AREA_sqKM'],\n             **kwargs)\nbar.grid(axis='x')\nbar.set_xlabel('Area (km$^2$)')\nbar.set_title('Ecosystems')\n\nkwargs = {\n    'marker':'s',\n    'facecolor':'r',\n    'edgecolor':'k',\n    's':50\n    }\n\nlabel_pad = 45\n\nBB = Towers.loc[Towers['Name']!='BBS']\nmap.scatter(BB['X'],BB['Y'],\n           label='Long-Term',\n           **kwargs)\nfor i,row in BB.iterrows():\n    map.text(row['X']+label_pad,row['Y']+label_pad,f'est. {int(row.Start)}',color='white')\n\nkwargs['marker'] = 'o'\nBBS = Towers.loc[Towers['Name']=='BBS']\nmap.scatter(BBS['X'],BBS['Y'],\n           label='Mobile',\n           **kwargs)\nfor i,row in BBS.iterrows():\n    map.text(row['X']+label_pad,row['Y']+label_pad,f'est. *2023',color='white')\n\nkwargs['facecolor'] ='white'\nfor treat in Chambers['Treatment'].unique():\n    row = Chambers.loc[((Chambers['Zone']==2016)&(Chambers['Treatment']==treat))]\n    kwargs['marker'] = row['marker'].iloc[0]\n    # kwargs['facecolor'] = row['color']\n    map.scatter(row.geometry.x,row.geometry.y,\n           label=treat,\n           **kwargs)\n\nhandles, labels = map.get_legend_handles_labels()\nhandles.insert(0,'Flux Towers')\nlabels.insert(0,'')\n\nhandles.insert(3,'Chamber Plots')\nlabels.insert(3,'')\nmap.legend(handles=(handles),labels=(labels),loc=4,\n           handler_map={str: mel.LegendTitle({'fontsize': 14})})\nmap.get_xaxis().set_visible(False)\nmap.get_yaxis().set_visible(False)\nmap.set_title('Burns Bog Ecological Conservancy Area')\n\n\ncx.add_basemap(map,source=cx.providers.OpenStreetMap.Mapnik, crs=BBS.crs)#, zoom=11)\nplt.savefig('images/EcosystemMap.png',dpi=600)\n\n\n\n\n\nBoundary = BBECA.dissolve()\n\nScale = 27500\n\nfig,ax=plt.subplots(figsize=(5,5))\n\naccess_token='pk.eyJ1IjoidWJjbWljcm9tZXQiLCJhIjoiY2xmMnJzYzlnMGFsYTNxcW1kYWhubjBiaSJ9.rhIOVatxQoS4M__qIFv6Pg'\n\ntileurl = 'https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?access_token=' + str(access_token)\n\nBoundary.plot(ax=ax,facecolor='None',edgecolor='yellow')\nxl = ax.get_xlim()\nyl = ax.get_ylim()\n\naspect = ((xl[0]-xl[1])/(yl[0]-yl[1]))\n\nax.set_ylim(yl[0]-Scale,yl[1]+Scale)\nax.set_xlim(xl[0]-Scale*aspect,xl[1]+Scale*aspect)\n\ncx.add_basemap(ax,source=tileurl, crs=Boundary.crs, zoom=12)\n\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.tight_layout()\nplt.savefig('images/Basemap.png',dpi=600)\n\n\n\n\n\nimport rasterio as rio\nimport numpy as np\nfrom rasterio.plot import show\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\npath = \"/mnt/g/My Drive/earthengine/\"\nname = \"S2_Summer_Composite.tif\"\nnew_name = \"S2_Summer_Composite_projected.tif\"\n\n\nBBECA.crs\n\n\ndst_crs = 'EPSG:26910'\n\nProjected_Image = 'temp/FI_Projected.tif'\n\nwith rio.open(path+name) as src:\n    transform, width, height = calculate_default_transform(\n        src.crs, dst_crs, src.width, src.height, *src.bounds)\n    kwargs = src.meta.copy()\n    kwargs.update({\n        'crs': dst_crs,\n        'transform': transform,\n        'width': width,\n        'height': height\n    })\n\n    with rio.open(Projected_Image, 'w', **kwargs) as dst:\n        for i in range(1, src.count + 1):\n            # clip = pct_clip(rio.band(src, i))\n            reproject(\n                source=rio.band(src, i),\n                destination=rio.band(dst, i),\n                src_transform=src.transform,\n                src_crs=src.crs,\n                dst_transform=transform,\n                dst_crs=dst_crs,\n                resampling=Resampling.nearest)\n\n\n\n# import numpy as np\n# import pandas as pd\n# import matplotlib.pyplot as plt\n\n# ECC = pd.read_csv('BB_Data/DELTA BURNS BOG.csv',parse_dates=['LOCAL_DATE'])\n# ECC = ECC.set_index('LOCAL_DATE')\n# ECC_m = ECC[['TEMP']].groupby(ECC.index.month).mean()\n# ECC_ym = ECC[['PRECIP_AMOUNT']].resample('m').sum()\n# ECC_m['PRECIP_AMOUNT'] = ECC_ym.groupby(ECC_ym.index.month).mean()\n\n# kwargs = {'color':'red','edgecolor':'k'}\n\n# fig,ax=plt.subplots(2)\n# ax[0].bar(ECC_m.index,ECC_m['TEMP'],**kwargs)\n# kwargs['color']='blue'\n# ax[1].bar(ECC_m.index,ECC_m['PRECIP_AMOUNT'],**kwargs)\n\n\n# ECC.loc[ECC['WIND_DIRECTION']<=0,'WIND_DIRECTION']=np.nan\n\n# ECC['WIND_DIRECTION'] = (ECC['WIND_DIRECTION']*10).round(0)\n# ECC['WIND_BIN'] = pd.cut(ECC['WIND_DIRECTION'],np.linspace(0,360,17))\n# bin_width = ECC['WIND_BIN'].apply(lambda x: (x.right-x.left)).mean()*np.pi/180\n\n\n# ECC['WIND_BIN'] = ECC['WIND_BIN'].apply(lambda x: x.mid*np.pi/180)\n\n\n# ECC_w = ECC.groupby('WIND_BIN').count()['WIND_DIRECTION']\n# ECC_w = ECC_w/ECC_w.sum()\n\n# fig, ax = plt.subplots(\n#   subplot_kw = {'projection': 'polar'} \n# )\n# ax.bar(ECC_w.index, ECC_w,\n# width=bin_width,\n# **kwargs)\n# ax.set_rticks([0.05,.1,.15])\n# ax.grid(True)\n# ax.set_theta_zero_location('N')\n# ax.set_theta_direction(-1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About the BBECA",
    "section": "",
    "text": "The Burns Bog Ecological Conservancy Area (BBECA) in Delta, Canada protects the largest raised peat bog on the West Coast. After decades of peat harvesting, the BBECA was established in 2005 with the aim of restoring ecosystem health and enhancing the water and carbon storage capacity of the bog. Water and carbon (CO2 and CH4) flux measurements began in 2014, when the CA-DBB flux tower was installed in a beakrush-sphagnum ecosystem undergoing active restoration via ditch blocking. The CA-DB2 tower was installed in 2019 in a pine-sphagnum-low-shrub ecosystem undergoing passive restoration. Flux chamber and a pore water sampling has also been conducted in the BBECA in recent years, and a temporary flux tower will be installed in a pine-sphagnum-woodland ecosystem for the 2023 summer season. There is a wealth of data available and we are seeking to make the best possible use of it. We are proposing to apply the CLASSIC model to the BBECA in order to help Metro Vancouver determine the best management practices for the BBECA. We seek to estimate water and carbon budgets for the bog in its current state and test the potential efficacy of future restoration strategies such as dike construction and seedling removal."
  },
  {
    "objectID": "index.html#publications",
    "href": "index.html#publications",
    "title": "About the BBECA",
    "section": "Publications",
    "text": "Publications"
  },
  {
    "objectID": "Base_Map.html",
    "href": "Base_Map.html",
    "title": "BBECA Work",
    "section": "",
    "text": "import ee\nee.Authenticate()\nee.Initialize()\n# print(ee.Image(\"NASA/NASADEM_HGT/001\").get(\"title\").getInfo())\n\nTo authorize access needed by Earth Engine, open the following\n        URL in a web browser and follow the instructions:\n        https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&request_id=EBTah8OVNuzzhyIbCHr3AtCCEb5kubXcK9x063EwZK4&tc=tSi5oqoYGxm-rOo_jzTtHRSx7nhyrwtRtcQOt5Psuvs&cc=wgeU0XSWOIkjWA4zsC3ubhYzMKx3QnP75oD3iaZTxhk\n        The authorization workflow will generate a code, which you should paste in the box below.\n        \n\n\n\nSuccessfully saved authorization token.\n\n\n\nimport contextily\nimport matplotlib.pyplot as plt\n\n\nl8 = ee.ImageCollection(\"LANDSAT/LC08/C01/T1_SR\")\nVan_pt = ee.Geometry.Point(-123, 49.25)\nVan = l8.filterDate(\"2017-07-15\", \"2017-08-16\")\\\n        .filterBounds(Van_pt)\\\n        .mosaic()\nviz_params = {\n  \"bands\": [\"B4\", \"B3\", \"B2\"],\n  \"gain\": '0.1, 0.1, 0.1',\n  \"scale\":20\n}\nurl_Van = Van.getMapId(viz_params)[\"tile_fetcher\"].url_format\nmap_Van = contextily.Place(\"Vancouver, BC\", source=url_Van)\n\nf, ax = plt.subplots(1, figsize=(8, 8))\n# for i, m in enumerate([map_pre, map_aft]):\n    # ax = axs[i]\nmap_Van.plot(ax=ax)\nax.set_axis_off()\nf.suptitle(\"Vancouver\")\nplt.show()"
  },
  {
    "objectID": "BBECA_Work.html#introduction",
    "href": "BBECA_Work.html#introduction",
    "title": "Ongoing and Proposed Research in the Burns Bog Ecological Conservancy Area",
    "section": "Introduction",
    "text": "Introduction\n\n\nBurns Bog is a unique raised peatland ecosystem located in Delta, BC.\n\nDecades of peat harvesting\n\nDrainage\nBBECA: established in 2005 to protect the area from development.\n\n\n\n\n\n<p>\nYour browser does not support iframes.\n</p>\n<p>"
  },
  {
    "objectID": "BBECA_Work.html#ecosystems",
    "href": "BBECA_Work.html#ecosystems",
    "title": "Ongoing and Proposed Research in the Burns Bog Ecological Conservancy Area",
    "section": "Ecosystems",
    "text": "Ecosystems"
  },
  {
    "objectID": "BBECA_Work.html#climatology",
    "href": "BBECA_Work.html#climatology",
    "title": "Ongoing and Proposed Research in the Burns Bog Ecological Conservancy Area",
    "section": "Climatology",
    "text": "Climatology\n\n\nUniquely situated in a\n\nSummer heatwaves and droughts\n\nDecreased C uptake and increased C emission\nIncrease wildfire risk\n\nFires in the bog release C\nSmoke events reduce C uptake\n\n\nIntense winter precipitation\n\n\n\n\n\n\n\n\n\n\nBBECA Climatology"
  }
]